package com.speedystone.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.azadljy.challenger.model.ChallengeModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHALLENGE_MODEL".
*/
public class ChallengeModelDao extends AbstractDao<ChallengeModel, String> {

    public static final String TABLENAME = "CHALLENGE_MODEL";

    /**
     * Properties of entity ChallengeModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Goal = new Property(2, String.class, "goal", false, "GOAL");
        public final static Property StartDate = new Property(3, String.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(4, String.class, "endDate", false, "END_DATE");
        public final static Property TotalTimes = new Property(5, int.class, "totalTimes", false, "TOTAL_TIMES");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property Describe = new Property(7, String.class, "describe", false, "DESCRIBE");
        public final static Property Process = new Property(8, float.class, "process", false, "PROCESS");
        public final static Property Thoughts = new Property(9, String.class, "thoughts", false, "THOUGHTS");
    }

    private DaoSession daoSession;


    public ChallengeModelDao(DaoConfig config) {
        super(config);
    }
    
    public ChallengeModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHALLENGE_MODEL\" (" + //
                "\"UUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "\"TITLE\" TEXT," + // 1: title
                "\"GOAL\" TEXT," + // 2: goal
                "\"START_DATE\" TEXT," + // 3: startDate
                "\"END_DATE\" TEXT," + // 4: endDate
                "\"TOTAL_TIMES\" INTEGER NOT NULL ," + // 5: totalTimes
                "\"STATUS\" TEXT," + // 6: status
                "\"DESCRIBE\" TEXT," + // 7: describe
                "\"PROCESS\" REAL NOT NULL ," + // 8: process
                "\"THOUGHTS\" TEXT);"); // 9: thoughts
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHALLENGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChallengeModel entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String goal = entity.getGoal();
        if (goal != null) {
            stmt.bindString(3, goal);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(5, endDate);
        }
        stmt.bindLong(6, entity.getTotalTimes());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(8, describe);
        }
        stmt.bindDouble(9, entity.getProcess());
 
        String thoughts = entity.getThoughts();
        if (thoughts != null) {
            stmt.bindString(10, thoughts);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChallengeModel entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String goal = entity.getGoal();
        if (goal != null) {
            stmt.bindString(3, goal);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(5, endDate);
        }
        stmt.bindLong(6, entity.getTotalTimes());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(8, describe);
        }
        stmt.bindDouble(9, entity.getProcess());
 
        String thoughts = entity.getThoughts();
        if (thoughts != null) {
            stmt.bindString(10, thoughts);
        }
    }

    @Override
    protected final void attachEntity(ChallengeModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChallengeModel readEntity(Cursor cursor, int offset) {
        ChallengeModel entity = new ChallengeModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goal
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endDate
            cursor.getInt(offset + 5), // totalTimes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // describe
            cursor.getFloat(offset + 8), // process
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // thoughts
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChallengeModel entity, int offset) {
        entity.setUuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalTimes(cursor.getInt(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescribe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProcess(cursor.getFloat(offset + 8));
        entity.setThoughts(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChallengeModel entity, long rowId) {
        return entity.getUuid();
    }
    
    @Override
    public String getKey(ChallengeModel entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChallengeModel entity) {
        return entity.getUuid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
