package com.speedystone.greendaodemo.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.azadljy.challenger.model.RewardModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REWARD_MODEL".
*/
public class RewardModelDao extends AbstractDao<RewardModel, String> {

    public static final String TABLENAME = "REWARD_MODEL";

    /**
     * Properties of entity RewardModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property GeneralDescription = new Property(1, String.class, "generalDescription", false, "GENERAL_DESCRIPTION");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property TimeFrame = new Property(3, int.class, "timeFrame", false, "TIME_FRAME");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property Thoughts = new Property(6, String.class, "thoughts", false, "THOUGHTS");
        public final static Property ChallengeId = new Property(7, String.class, "challengeId", false, "CHALLENGE_ID");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
    }

    private DaoSession daoSession;

    private Query<RewardModel> challengeModel_RewardModelsQuery;

    public RewardModelDao(DaoConfig config) {
        super(config);
    }
    
    public RewardModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REWARD_MODEL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"GENERAL_DESCRIPTION\" TEXT," + // 1: generalDescription
                "\"NAME\" TEXT," + // 2: name
                "\"TIME_FRAME\" INTEGER NOT NULL ," + // 3: timeFrame
                "\"TYPE\" TEXT," + // 4: type
                "\"STATUS\" TEXT," + // 5: status
                "\"THOUGHTS\" TEXT," + // 6: thoughts
                "\"CHALLENGE_ID\" TEXT," + // 7: challengeId
                "\"DATE\" INTEGER);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REWARD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RewardModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String generalDescription = entity.getGeneralDescription();
        if (generalDescription != null) {
            stmt.bindString(2, generalDescription);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getTimeFrame());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String thoughts = entity.getThoughts();
        if (thoughts != null) {
            stmt.bindString(7, thoughts);
        }
 
        String challengeId = entity.getChallengeId();
        if (challengeId != null) {
            stmt.bindString(8, challengeId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RewardModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String generalDescription = entity.getGeneralDescription();
        if (generalDescription != null) {
            stmt.bindString(2, generalDescription);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getTimeFrame());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String thoughts = entity.getThoughts();
        if (thoughts != null) {
            stmt.bindString(7, thoughts);
        }
 
        String challengeId = entity.getChallengeId();
        if (challengeId != null) {
            stmt.bindString(8, challengeId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
    }

    @Override
    protected final void attachEntity(RewardModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RewardModel readEntity(Cursor cursor, int offset) {
        RewardModel entity = new RewardModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // generalDescription
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // timeFrame
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thoughts
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // challengeId
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RewardModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGeneralDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeFrame(cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThoughts(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChallengeId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RewardModel entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(RewardModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RewardModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "rewardModels" to-many relationship of ChallengeModel. */
    public List<RewardModel> _queryChallengeModel_RewardModels(String challengeId) {
        synchronized (this) {
            if (challengeModel_RewardModelsQuery == null) {
                QueryBuilder<RewardModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChallengeId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                challengeModel_RewardModelsQuery = queryBuilder.build();
            }
        }
        Query<RewardModel> query = challengeModel_RewardModelsQuery.forCurrentThread();
        query.setParameter(0, challengeId);
        return query.list();
    }

}
