package com.speedystone.greendaodemo.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.azadljy.challenger.model.PictureModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PICTURE_MODEL".
*/
public class PictureModelDao extends AbstractDao<PictureModel, Long> {

    public static final String TABLENAME = "PICTURE_MODEL";

    /**
     * Properties of entity PictureModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PictureUrl = new Property(1, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property PicDescribe = new Property(2, String.class, "picDescribe", false, "PIC_DESCRIBE");
        public final static Property PId = new Property(3, String.class, "pId", false, "P_ID");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
    }

    private Query<PictureModel> experienceModel_PictureModelsQuery;
    private Query<PictureModel> rewardModel_PictureModelsQuery;

    public PictureModelDao(DaoConfig config) {
        super(config);
    }
    
    public PictureModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PICTURE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PICTURE_URL\" TEXT," + // 1: pictureUrl
                "\"PIC_DESCRIBE\" TEXT," + // 2: picDescribe
                "\"P_ID\" TEXT," + // 3: pId
                "\"DATE\" INTEGER);"); // 4: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICTURE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PictureModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(2, pictureUrl);
        }
 
        String picDescribe = entity.getPicDescribe();
        if (picDescribe != null) {
            stmt.bindString(3, picDescribe);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(4, pId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PictureModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(2, pictureUrl);
        }
 
        String picDescribe = entity.getPicDescribe();
        if (picDescribe != null) {
            stmt.bindString(3, picDescribe);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(4, pId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PictureModel readEntity(Cursor cursor, int offset) {
        PictureModel entity = new PictureModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pictureUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // picDescribe
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PictureModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPictureUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPicDescribe(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PictureModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PictureModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PictureModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pictureModels" to-many relationship of ExperienceModel. */
    public List<PictureModel> _queryExperienceModel_PictureModels(String pId) {
        synchronized (this) {
            if (experienceModel_PictureModelsQuery == null) {
                QueryBuilder<PictureModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                experienceModel_PictureModelsQuery = queryBuilder.build();
            }
        }
        Query<PictureModel> query = experienceModel_PictureModelsQuery.forCurrentThread();
        query.setParameter(0, pId);
        return query.list();
    }

    /** Internal query to resolve the "pictureModels" to-many relationship of RewardModel. */
    public List<PictureModel> _queryRewardModel_PictureModels(String pId) {
        synchronized (this) {
            if (rewardModel_PictureModelsQuery == null) {
                QueryBuilder<PictureModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                rewardModel_PictureModelsQuery = queryBuilder.build();
            }
        }
        Query<PictureModel> query = rewardModel_PictureModelsQuery.forCurrentThread();
        query.setParameter(0, pId);
        return query.list();
    }

}
