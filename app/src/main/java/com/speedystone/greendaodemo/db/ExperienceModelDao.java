package com.speedystone.greendaodemo.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.azadljy.challenger.model.ExperienceModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPERIENCE_MODEL".
*/
public class ExperienceModelDao extends AbstractDao<ExperienceModel, String> {

    public static final String TABLENAME = "EXPERIENCE_MODEL";

    /**
     * Properties of entity ExperienceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Thoughts = new Property(1, String.class, "thoughts", false, "THOUGHTS");
        public final static Property ChallengeId = new Property(2, String.class, "challengeId", false, "CHALLENGE_ID");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
    }

    private DaoSession daoSession;

    private Query<ExperienceModel> challengeModel_ExperienceModelQuery;

    public ExperienceModelDao(DaoConfig config) {
        super(config);
    }
    
    public ExperienceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPERIENCE_MODEL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"THOUGHTS\" TEXT," + // 1: thoughts
                "\"CHALLENGE_ID\" TEXT," + // 2: challengeId
                "\"DATE\" INTEGER);"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPERIENCE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExperienceModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String thoughts = entity.getThoughts();
        if (thoughts != null) {
            stmt.bindString(2, thoughts);
        }
 
        String challengeId = entity.getChallengeId();
        if (challengeId != null) {
            stmt.bindString(3, challengeId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExperienceModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String thoughts = entity.getThoughts();
        if (thoughts != null) {
            stmt.bindString(2, thoughts);
        }
 
        String challengeId = entity.getChallengeId();
        if (challengeId != null) {
            stmt.bindString(3, challengeId);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
    }

    @Override
    protected final void attachEntity(ExperienceModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ExperienceModel readEntity(Cursor cursor, int offset) {
        ExperienceModel entity = new ExperienceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thoughts
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // challengeId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExperienceModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setThoughts(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChallengeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ExperienceModel entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ExperienceModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExperienceModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ExperienceModel" to-many relationship of ChallengeModel. */
    public List<ExperienceModel> _queryChallengeModel_ExperienceModel(String challengeId) {
        synchronized (this) {
            if (challengeModel_ExperienceModelQuery == null) {
                QueryBuilder<ExperienceModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChallengeId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                challengeModel_ExperienceModelQuery = queryBuilder.build();
            }
        }
        Query<ExperienceModel> query = challengeModel_ExperienceModelQuery.forCurrentThread();
        query.setParameter(0, challengeId);
        return query.list();
    }

}
